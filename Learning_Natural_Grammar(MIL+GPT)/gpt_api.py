import openaiimport timefrom openai.error import RateLimitError# Replace 'your-api-key' with your actual OpenAI API keyopenai.api_key = 'API_KEY'def evaluate_model_with_chatgpt(training_positive, training_negative, testing_positive, testing_negative):    #print("I am here")    prompt = f"""Hey ChatGPT,The language 'L' accepts sentences in positive examples and rejects in the negative examples of Training Data.Training Data:Positive examples: {training_positive}Negative examples: {training_negative}Please evaluate the following test sentences.Testing Data: {testing_positive}+{testing_negative}Instructions:    1. For each test sentence in the Testing Data, determine if it belongs to the language 'L'.2. ans = 1 if  sentences in the  Testing data that belong to language 'L'.3. ans = 0 if sentences in  Testing data that do not belong to language 'L'.4. Make a list  of 'ans' as  in the same order fas in Testing data.Return just the array of 'ans' as the form [1,0, 1, 1,0,..]. Dont use ```python.  Avoid all other analyses while printing results."""        #print(prompt)    max_retries = 10    retry_delay = 5  # Initial delay between retries in seconds    for attempt in range(max_retries):        try:            response = openai.ChatCompletion.create(                model="gpt-4-turbo",                messages=[                                        {"role": "system", "content": prompt}                ],                max_tokens=100,                n=1,                stop=None,                temperature=0.5,            )            result = response.choices[0].message['content'].strip()            #print(result)            return result        except RateLimitError as e:            retry_after = e.headers.get('Retry-After', retry_delay)            retry_delay = float(retry_after) if retry_after else retry_delay            print(f"Rate limit reached. Retrying in {retry_delay} seconds.")            time.sleep(retry_delay)            retry_delay = min(retry_delay * 2, 60)  # Exponential backoff with a max cap        except openai.error.APIError as e:            if e.code == 524:                print(f"Gateway timeout. Retrying in {retry_delay} seconds.")                time.sleep(retry_delay)                retry_delay = min(retry_delay * 2, 60)  # Exponential backoff with a max cap            else:                print(f"An API error occurred: {e}")                break        if attempt == max_retries - 1:            return "[0,0]"                def evaluate_model_with_chatgpt_hybrid(training_positive, training_negative, testing_positive,testing_negative,  H):    #print("I am here")    prompt = f"""Hey ChatGPT,The language 'L' accepts sentences in positive examples and rejects in the negative examples of Training Data. The possible production rules of  partial grammar for 'L' is given in production rules  in which "vp" means verb phrase, "np" means noun phrase, "det" means Determiner, "adj" means adjective and "prep" means peposition.production rules : {H}Training Data:Positive examples: {training_positive}Negative examples: {training_negative}Please evaluate the following test sentences.Test Data:    Positive examples: {testing_positive}    Negative examples :  {testing_negative}Instructions:1. For each test sentence in the Test Data, determine if it belongs to the language 'L' either using example or prodcution rules or both.3. ans = 1 if  sentences in the  Testing data that belong to language 'L'.4. ans = 0 if sentences in  Testing data that do not belong to language 'L'.5. Make a list  of 'ans' as  in the same order fas in Testing data.Return just the array of 'ans' as the form [0,1,0,..]. Dont use ```python.  Avoid all other analyses while printing results."""        #print(prompt)    max_retries = 10    retry_delay = 5 # Initial delay between retries in seconds    for attempt in range(max_retries):        try:            response = openai.ChatCompletion.create(                model="gpt-4-turbo",                messages=[                                        {"role": "system", "content": prompt}                ],                max_tokens=100,                n=1,                stop=None,                temperature=0.5,            )            result = response.choices[0].message['content'].strip()            #print(result)            return result        except RateLimitError as e:            retry_after = e.headers.get('Retry-After', retry_delay)            retry_delay = float(retry_after) if retry_after else retry_delay            print(f"Rate limit reached. Retrying in {retry_delay} seconds.")            time.sleep(retry_delay)            retry_delay = min(retry_delay * 2, 60)  # Exponential backoff with a max cap        except openai.error.APIError as e:            if e.code == 524:                print(f"Gateway timeout. Retrying in {retry_delay} seconds.")                time.sleep(retry_delay)                retry_delay = min(retry_delay * 2, 60)  # Exponential backoff with a max cap            else:                print(f"An API error occurred: {e}")                break        if attempt == max_retries - 1:            return "[0,0,0,0]"